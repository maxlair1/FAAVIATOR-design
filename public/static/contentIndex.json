{"Components/Buttons/ActionButton":{"title":"ActionButton","links":[],"tags":[],"content":"Action Button"},"Components/Buttons/Button":{"title":"Button","links":[],"tags":["React","SwiftUI","Component"],"content":"Interactive backbone element of any application. Used for navigation, actions, and confirmations.\n\n\n                  \n                  Version 1 \n                  \n                \n\n\n\n                  \n                  Notice \n                  \n                \n\nThis documentation is non-exaustive and a work-in-progress\n\n\nOverview\n\n\nUse\n\nThis is how to use the Button\nSwiftUI\nuse SwiftComponent(_:) to Initialize the component\n//SwiftUI Usage\n\nProperties of SwiftComponent(_:)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPropertiesTypeDefaultDescriptionColorColor.blue600This is the color of the icon.\nReact\n//React Usage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPropertiesTypeDefaultDescriptionColorColor.blue600This is the color of the icon.\nInstall\n\nFigma\n\n"},"Components/Icons":{"title":"Icons","links":[],"tags":[],"content":"The icons that Faaviator uses are from an open-source and versatile icon pack called Iconoir\nUse\n\nCustomIconView(.iconoir(.icon), size: size, color: .color)\nCustomIconView(.system(.icon), size: size, color: .color)\nAccepts both .iconoir() and the default .system() (apple icons)`\nUse the CustomIcon in\nUse the CustomIconView alone\nSwiftimport SwiftUI  \nimport Iconoir\n \nstruct ContentView: View {  \n    var body: some View {  \n        VStack(spacing: 20) {\n          \n            // Using an SF Symbol\n            CustomIconView(.system(&quot;star.fill&quot;), size: 30, color:.textPrimary)            \n            // Using an Iconoir icon  \n            CustomIconView(.iconoir(.bell), size: 40, color: .red)            \n            \n            // Using another Iconoir icon with default size and color  \n            CustomIconView(.iconoir(.addUser))            \n            \n            // You can also use it inline with other views  \n            HStack {  \n                Text(&quot;Notifications&quot;)  \n                CustomIconView(.iconoir(.bell), size: 20, color: .green)  \n            }  \n        }  \n    }  \n}\nInstall\n\nAdding to SwiftUI\nFirst we need to install the Iconoir Swift Package to the project.\n\nOur custom enum and view\nSwiftimport Foundation\nimport SwiftUI\nimport Iconoir\n \nenum CustomIcon {\n    case system(String)\n    case iconoir(Iconoir)\n}\n \nstruct CustomIconView: View {\n    let icon: CustomIcon\n    let size: CGFloat\n    let color: Color\n    \n    init(_ icon: CustomIcon, size: CGFloat = 24, color: Color = .TextPrimary) {\n        self.icon = icon\n        self.size = size\n        self.color = color\n    }\n    \n    var body: some View {\n        switch icon {\n        case .system(let name):\n            Image(systemName: name)\n                .font(.system(size: size))\n                .foregroundColor(color)\n        case .iconoir(let iconoir):\n            iconoir.asImage\n                .font(.system(size: size))\n                .foregroundColor(color)\n        }\n    }\n}\nDesign\n\nBrowse the catalog of icons at Iconoir.com\nView the Figma components below\nFigma\n"},"Foundations/Color":{"title":"Color","links":[],"tags":["Foundation","React","SwiftUI"],"content":"Our colors represent first-responders, public safety, and aviation. One of the most visually expressive parts of a brand identity, and particularly a user interface.\n\n\n                  \n                  Version 1 \n                  \n                \n\n\n\n                  \n                  This documentation is non-exaustive and a work-in-progress \n                  \n                \n\nOverview\n\n\nUse\n\nThis is how to use the component\nSwiftUI\nuse SwiftComponent(_:) to Initialize the component\nSwiftUI//SwiftUI Usage\nProperties of SwiftComponent(_:)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPropertiesTypeDefaultDescriptionColorColor.blue600This is the color of the icon.\nReact\nUse &lt;ReactComponent /&gt; to Initialize the component\nReact//React Usage\nProperties of SwiftComponent(_:)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPropertiesTypeDefaultDescriptionColorColor.blue600This is the color of the icon.\nInstall\n\nSwiftUI\nColor+FAATheme.swift \nimport Foundation\nimport SwiftUI\n \nextension Color {\n    // MARK: - Gray Colors\n    static let gray100 = Color(red: 254/255, green: 254/255, blue: 254/255)\n    static let gray200 = Color(red: 238/255, green: 238/255, blue: 238/255)\n    static let gray300 = Color(red: 214/255, green: 214/255, blue: 214/255)\n    static let gray400 = Color(red: 181/255, green: 181/255, blue: 181/255)\n    static let gray500 = Color(red: 149/255, green: 149/255, blue: 149/255)\n    static let gray600 = Color(red: 118/255, green: 118/255, blue: 118/255)\n    static let gray700 = Color(red: 89/255, green: 89/255, blue: 89/255)\n    static let gray800 = Color(red: 66/255, green: 66/255, blue: 66/255)\n    static let gray900 = Color(red: 43/255, green: 43/255, blue: 43/255)\n    static let gray1000 = Color(red: 28/255, green: 28/255, blue: 28/255)\n \n    // MARK: - Blue Colors\n    static let blue100 = Color(red: 253/255, green: 254/255, blue: 255/255)\n    static let blue200 = Color(red: 224/255, green: 240/255, blue: 255/255)\n    static let blue300 = Color(red: 179/255, green: 218/255, blue: 255/255)\n    static let blue400 = Color(red: 113/255, green: 186/255, blue: 255/255)\n    static let blue500 = Color(red: 49/255, green: 151/255, blue: 255/255)\n    static let blue600 = Color(red: 1/255, green: 112/255, blue: 244/255)\n    static let blue700 = Color(red: 0/255, green: 82/255, blue: 194/255)\n    static let blue800 = Color(red: 0/255, green: 61/255, blue: 147/255)\n    static let blue900 = Color(red: 0/255, green: 40/255, blue: 98/255)\n    static let blue1000 = Color(red: 0/255, green: 27/255, blue: 64/255)\n \n    // MARK: - Green Colors\n    static let green100 = Color(red: 252/255, green: 255/255, blue: 251/255)\n    static let green200 = Color(red: 208/255, green: 250/255, blue: 197/255)\n    static let green300 = Color(red: 113/255, green: 241/255, blue: 82/255)\n    static let green400 = Color(red: 41/255, green: 209/255, blue: 0/255)\n    static let green500 = Color(red: 34/255, green: 172/255, blue: 0/255)\n    static let green600 = Color(red: 27/255, green: 137/255, blue: 0/255)\n    static let green700 = Color(red: 20/255, green: 103/255, blue: 0/255)\n    static let green800 = Color(red: 15/255, green: 77/255, blue: 0/255)\n    static let green900 = Color(red: 10/255, green: 50/255, blue: 0/255)\n    static let green1000 = Color(red: 7/255, green: 33/255, blue: 0/255)\n \n    // MARK: - Orange Colors\n    static let orange100 = Color(red: 255/255, green: 254/255, blue: 252/255)\n    static let orange200 = Color(red: 253/255, green: 235/255, blue: 208/255)\n    static let orange300 = Color(red: 250/255, green: 208/255, blue: 145/255)\n    static let orange400 = Color(red: 246/255, green: 163/255, blue: 40/255)\n    static let orange500 = Color(red: 210/255, green: 131/255, blue: 15/255)\n    static let orange600 = Color(red: 167/255, green: 104/255, blue: 12/255)\n    static let orange700 = Color(red: 126/255, green: 78/255, blue: 9/255)\n    static let orange800 = Color(red: 94/255, green: 58/255, blue: 6/255)\n    static let orange900 = Color(red: 61/255, green: 38/255, blue: 4/255)\n    static let orange1000 = Color(red: 40/255, green: 25/255, blue: 3/255)\n \n    // MARK: - Red Colors\n    static let red100 = Color(red: 255/255, green: 253/255, blue: 253/255)\n    static let red200 = Color(red: 255/255, green: 233/255, blue: 233/255)\n    static let red300 = Color(red: 255/255, green: 200/255, blue: 200/255)\n    static let red400 = Color(red: 255/255, green: 152/255, blue: 152/255)\n    static let red500 = Color(red: 255/255, green: 93/255, blue: 93/255)\n    static let red600 = Color(red: 223/255, green: 49/255, blue: 49/255)\n    static let red700 = Color(red: 172/255, green: 32/255, blue: 32/255)\n    static let red800 = Color(red: 130/255, green: 22/255, blue: 22/255)\n    static let red900 = Color(red: 87/255, green: 15/255, blue: 15/255)\n    static let red1000 = Color(red: 58/255, green: 10/255, blue: 10/255)\n \n    // MARK: - Semantic Colors\n    static let modeNeutral = Color.white\n \n    static let Primary = Color.blue600\n    static let Secondary = Color.red600\n    static let Tertiary = Color.orange400\n    //Note: The following are assigned from the color sets. Alternatively bring in these colors through the snippet pop-up (CMD + SHIFT + L &gt; Color)\n    \n    //ex: .foregroundColor(Color.&quot;TextPrimary&quot;)) OR .foregroundColor(Color.TextPrimary)\n    // Background Colors\n    static let BackgroundPrimary = Color(&quot;BackgroundPrimary&quot;)\n    static let BackgroundSecondary = Color(&quot;BackgroundSecondary&quot;)\n    static let BackgroundTertiary = Color(&quot;BackgroundTertiary&quot;)\n    static let BackgroundQuaternary = Color(&quot;BackgroundQuaternary&quot;)\n \n    // Text Colors\n    static let TextPrimary = Color(&quot;TextPrimary&quot;)\n    static let TextSecondary = Color(&quot;TextSecondary&quot;)\n    static let TextTertiary = Color(&quot;TextTertiary&quot;)\n    static let TextInvert = Color(&quot;TextInvert&quot;)\n \n    // Button Colors\n    static let buttonsChipDefault = Color.gray500\n    static let buttonsChipDefaultContrast = Color.gray900\n    static let buttonsChipSelected = Color.blue600\n    static let buttonsChipSelectedContrast = Color.gray100\n    static let buttonsFocusOutline = Color.gray800\n    static let buttonsNegativePrimary = Color.red600\n    static let buttonsNegativePrimaryActive = Color.red600.opacity(0.75)\n    static let buttonsNegativePrimaryContrast = Color.gray100\n    static let buttonsNegativePrimaryDisabled = Color.gray300\n    static let buttonsNegativePrimaryDisabledContrast = Color.gray500\n    static let buttonsNegativePrimaryHover = Color.red600.opacity(0.9)\n    static let buttonsPositivePrimary = Color.blue600\n    static let buttonsPositivePrimaryActive = Color.blue600.opacity(0.75)\n    static let buttonsPositivePrimaryContrast = Color.blue100\n    static let buttonsPositivePrimaryDisabled = Color.gray300\n    static let buttonsPositivePrimaryDisabledContrast = Color.gray500\n    static let buttonsPositivePrimaryHover = Color.blue600.opacity(0.9)\n    static let buttonsPositiveSecondary = Color.gray200\n    static let buttonsPositiveSecondaryActive = Color.gray200.opacity(0.5)\n    static let buttonsPositiveSecondaryContrast = Color.gray900\n    static let buttonsPositiveSecondaryDisabled = Color.gray200\n    static let buttonsPositiveSecondaryDisabledContrast = Color.gray500\n    static let buttonsPositiveTertiaryStroke = Color.gray500\n    static let buttonsPositiveTertiaryActive = Color.gray100\n    static let buttonsPositiveTertiaryContrast = Color.gray900\n    static let buttonsPositiveTertiaryDisabledStroke = Color.gray500.opacity(0)\n    static let buttonsPositiveTertiaryDisabledContrast = Color.gray500\n    static let buttonsPositiveTertiaryHover = Color.gray200.opacity(0.5)\n    static let buttonsSegmentedButtonsActiveBackground = Color.gray200\n    static let buttonsSegmentedButtonsActiveText = Color.gray1000\n    static let buttonsSegmentedButtonsBackground = Color.gray300\n    static let buttonsSegmentedButtonsInactiveText = Color.gray700\n \n    // Icons Colors\n    static let iconsBase = Color.gray700\n \n    // Input Colors\n    static let inputsCheckboxActive = Color.blue600\n    static let inputsCheckboxInactiveOutline = Color.gray700\n    static let inputsCheckboxIcon = Color.gray100\n    static let inputsCheckboxLabel = Color.textPrimary\n    static let inputsCheckboxOutline = Color.gray600\n    static let inputsTextInputLabel = Color.gray700\n    static let inputsTextInputNote = Color.gray900\n    static let inputsTextInputOutline = Color.gray600\n    static let inputsTextInputPlaceholder = Color.gray400\n    static let inputsTextInputText = Color.gray800\n \n    // Overlays Colors\n    static let overlaysBackdrop = Color.black.opacity(0.45)\n \n    // Snackbar Colors\n    static let snackbarBackground = Color.gray1000\n    static let snackbarText = Color.textInvert\n \n    // Tabs Colors\n    static let tabsActive = Color.blue600\n    static let tabsInactive = Color.gray800\n    \n}\n \nReact\n//how to use the colors in react\n\nFigma\n\n "}}